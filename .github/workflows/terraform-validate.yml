name: Terraform Validate, Lint, Scan & Plan

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

permissions:
  id-token: write # n√©cessaire pour l‚Äôauthentification OIDC AWS
  contents: read # n√©cessaire pour `actions/checkout`
  pull-requests: write # n√©cessaire pour commenter les PR et pour certaines actions de plan

jobs:
  validate-code:
    name: Validate Terraform Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::472910743243:role/GitHubActions-Terraform-Role-Projet1 # !! remplacez par l‚ÄôARN de votre r√¥le !!
          aws-region: eu-west-3 # votre r√©gion AWS

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.1" # sp√©cifiez la version de Terraform √† utiliser

      - name: Terraform Init (validation mode)
        id: init_validate
        run: terraform init -backend=false -input=false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive -diff

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.58.0 # sp√©cifiez la version de TFLint √† utiliser

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint --recursive

      - name: Run Trivy IaC scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "config"
          input: "."
          format: "table"
          exit-code: "0"
          severity: "CRITICAL"
          ignore-unfixed: true
#Jobs 2 -> Terraform Plan
  terraform_plan: 
    name: Generate Terraform Plan
    runs-on: ubuntu-latest
    needs: validate-code # s‚Äôex√©cute seulement si le job validate-code a r√©ussi
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::148867357643:role/GitHubActions-Terraform-Role-Projet1 # !! remplacez par l‚ÄôARN de votre r√¥le !!
          aws-region: eu-west-3 # votre r√©gion AWS

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.1" # sp√©cifiez la version de Terraform √† utiliser

      - name: Determine Terraform workspace
        run: |
          if [ "${{ github.base_ref }}" = "main" ]; then
            WORKSPACE=prod
          elif [ "${{ github.base_ref }}" = "staging" ]; then
            WORKSPACE=dev
          else
            WORKSPACE=dev
          fi
          echo "WORKSPACE=$WORKSPACE" >> $GITHUB_ENV

      - name: Terraform Init (for plan)
        id: init_plan
        run: terraform init -input=false
        # ici, nous initialisons le backend car le plan en a besoin pour lire l‚Äô√©tat actuel

      - name: Select Terraform workspace
        run: |
          echo "Selecting workspace: $WORKSPACE"
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Terraform Plan
        id: plan
        run: |
          echo "--- Running Terraform Plan ---"
          # Le code ci-dessous pourra √™tre largement simplifi√© une fois que la PR #36476 de Terraform sera int√©gr√©e.
          # cf. https://github.com/hashicorp/terraform/issues/36476
          terraform plan -input=false -no-color -detailed-exitcode > plan.txt
          PLAN_COMMAND_RAW_EXIT_CODE=$? # Capture du code de sortie brut de terraform plan
          echo "Terraform Plan command raw exit code: $PLAN_COMMAND_RAW_EXIT_CODE"

          echo "--- Content of plan.txt ---"
          cat plan.txt
          echo "--- End of plan.txt ---"

          FINAL_PLAN_DETAILS="V√©rification manuelle du plan requise (analyse du contenu ou code de sortie non concluant)." # Valeur par d√©faut

          if [ "$PLAN_COMMAND_RAW_EXIT_CODE" -eq 1 ]; then
            # Erreur critique de 'terraform plan' (ex: erreur de syntaxe)
            FINAL_PLAN_DETAILS="Erreur critique lors de la g√©n√©ration du plan (Terraform a retourn√© le code: $PLAN_COMMAND_RAW_EXIT_CODE)"
            echo "Condition: La commande Terraform Plan a directement signal√© une erreur."
          elif grep -q -E "(No changes\. Infrastructure is up-to-date\.|No changes\. Your infrastructure matches the configuration\.|Plan: 0 to add, 0 to change, 0 to destroy\.)" plan.txt; then
            # Message explicite "No changes" ou r√©sum√© √† z√©ro trouv√© dans plan.txt
            FINAL_PLAN_DETAILS="aucun changement d√©tect√© (confirm√© par l'analyse du contenu du plan)"
            echo "Condition: Message explicite d'absence de changement trouv√© dans plan.txt."
          # Recherche d'une ligne de r√©sum√© indiquant des changements (au moins 1 ajout, modification ou suppression)
          elif PLAN_SUMMARY_LINE=$(grep -E "^Plan: ([0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy\.)$" plan.txt) && \
              (echo "$PLAN_SUMMARY_LINE" | grep -q -E "([1-9][0-9]* to add|[1-9][0-9]* to change|[1-9][0-9]* to destroy)") ; then
            # La ligne de r√©sum√© a √©t√© trouv√©e ET elle contient au moins un chiffre > 0 pour add/change/destroy
            ADD=$(echo "$PLAN_SUMMARY_LINE" | sed -n 's/^Plan: \([0-9]*\) to add,.*/\1/p')
            CHANGE=$(echo "$PLAN_SUMMARY_LINE" | sed -n 's/^Plan: [0-9]* to add, \([0-9]*\) to change,.*/\1/p')
            DESTROY=$(echo "$PLAN_SUMMARY_LINE" | sed -n 's/^Plan:.*, \([0-9]*\) to destroy.$/\1/p')
            FINAL_PLAN_DETAILS="changements d√©tect√©s (analyse du r√©sum√©: $ADD √† ajouter, $CHANGE √† modifier, $DESTROY √† d√©truire). Voir l'art√©fact."
            echo "Condition: Changements d√©tect√©s √† partir de la ligne de r√©sum√© de plan.txt."
          else
            # Cas ambigu : pas de message clair "No changes", pas de r√©sum√© standard avec des chiffres > 0,
            # ou format de plan inattendu. Le code de sortie brut peut donner une indication.
            echo "Warning: Contenu du plan ambigu pour la d√©tection automatis√©e des changements. Code de sortie brut de TF: $PLAN_COMMAND_RAW_EXIT_CODE."
            if [ "$PLAN_COMMAND_RAW_EXIT_CODE" -eq 0 ] || [ "$PLAN_COMMAND_RAW_EXIT_CODE" -eq 2 ]; then
                # Si le code de sortie √©tait 0 ou 2, mais que nous n'avons pas pu analyser le plan, c'est suspect.
                FINAL_PLAN_DETAILS="Plan g√©n√©r√© (code TF: $PLAN_COMMAND_RAW_EXIT_CODE), mais contenu non analysable automatiquement. V√©rification manuelle requise."
            fi
            # FINAL_PLAN_DETAILS conserve sa valeur par d√©faut "V√©rification manuelle..." si non modifi√© ci-dessus.
          fi

          echo "PLAN_DETAILS=${FINAL_PLAN_DETAILS}" >> $GITHUB_OUTPUT
          echo "Final PLAN_DETAILS set to: ${FINAL_PLAN_DETAILS}"

          if [ "$PLAN_COMMAND_RAW_EXIT_CODE" -eq 1 ]; then
            exit 1
          fi
        continue-on-error: true

      - name: Comment PR with plan output
        if: success() || failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### üìù R√©sultat du `terraform plan` pour le workspace `$WORKSPACE`

            ${{ steps.plan.outputs.PLAN_DETAILS }}

            Le plan complet est disponible en tant qu‚Äôartefact attach√© √† ce workflow.

            **Veuillez examiner attentivement le plan avant d‚Äôapprouver cette PR.**

      - name: Upload Terraform plan artifact
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-$WORKSPACE
          path: plan.txt
          retention-days: 7 # conserve l‚Äôartefact pendant 7 jours